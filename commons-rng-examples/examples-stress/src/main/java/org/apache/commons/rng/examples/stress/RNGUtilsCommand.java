/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.rng.examples.stress;

import org.apache.commons.rng.UniformRandomProvider;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Mixin;
import picocli.CommandLine.Model.CommandSpec;
import picocli.CommandLine.RunLast;
import picocli.CommandLine.Spec;

import java.util.concurrent.Callable;

/**
 * Class containing utilities for the random number generators in the Commons
 * RNG library.
 *
 * <p>The principle action is testing a generator by piping the values
 * returned by its {@link UniformRandomProvider#nextInt()} method to a
 * program that reads {@code int} values from its standard input and
 * writes an analysis report to standard output.
 * The <a href="http://www.phy.duke.edu/~rgb/General/dieharder.php">
 * "dieharder"</a> test suite is such a software.</p>
 *
 * <p>Example of command line, assuming that "rng-utils.jar" specifies this
 * class as the "main" class (see {@link #main(String[]) main} method):
 * <pre>{@code $ java -jar rng-utils.jar stress /usr/bin/dieharder -a -g 200 -Y 1 -k 2}</pre>
 * </p>
 *
 * <p>Other functionality includes:</p>
 *
 * <ul>
 *   <li>Listing all the generators
 *   <li>...
 * </ul>
 */
@Command(name = "rng-utils",
         description = "Apache Commons Random Number Generators Utilities.")
class RNGUtilsCommand implements Callable<Void> {
    /** The command specification. Used to print the usage built by Picocli. */
    @Spec
    private CommandSpec spec;

    /** The standard options. */
    @Mixin
    private StandardOptions reusableOptions;

    /**
     * Run the RNG Utilities command line application.
     *
     * @param args Application's arguments.
     */
    public static void main(String[] args) {
        final RNGUtilsCommand tester = new RNGUtilsCommand();

        // Build the command line manually so we can configure options.
        final CommandLine cmd = new CommandLine(tester)
                .addSubcommand("stress",     new CommandLine(new StressTestCommand())
                                                             .setStopAtPositional(true))
                .addSubcommand("list",       new ListCommand())
                .addSubcommand("properties", new PropertiesCommand())
                .addSubcommand("system",     new SystemInfoCommand())
                // Call last to apply to all sub-commands
                .setCaseInsensitiveEnumValuesAllowed(true);

        try {
            // Parse the command line and invokes the Callable program (RNGUtilities)
            cmd.parseWithHandler(new RunLast(), args);
        } catch (final picocli.CommandLine.ExecutionException ex) {
            final Throwable cause = ex.getCause();
            if (cause != null) {
                // If this was an exception generated by the application then the full
                // stack trace is not needed depending on log level. This limits stack
                // trace output to unexpected errors in the common use case.
                if (cause instanceof ApplicationException &&
                        !LogUtils.isLoggable(LogUtils.LogLevel.DEBUG)) {
                    LogUtils.error(cause.getMessage());
                } else {
                    LogUtils.error(cause, cause.getMessage());
                }
                System.exit(1);
            }
            // No cause so re-throw. This may be a Picocli parsing error.
            throw ex;
        }
    }

    @Override
    public Void call() {
        // All work is done in sub-commands so just print the usage
        spec.commandLine().usage(System.out);
        return null;
    }
}
