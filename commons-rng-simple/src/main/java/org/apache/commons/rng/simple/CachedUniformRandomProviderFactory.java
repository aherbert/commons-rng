/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.rng.simple;

import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.core.source32.IntProvider;
import org.apache.commons.rng.core.source64.LongProvider;
import org.apache.commons.rng.core.util.NumberFactory;

/**
 * Factory class for wrapping instances of {@link UniformRandomProvider} to cache
 * values that can be reused to provision the interface methods.
 *
 * <p>The int values generated by an {@link IntProvider} can be cached to enable
 * fast provision of {@link UniformRandomProvider#nextBoolean()}.

 * <p>The long values generated by a {@link LongProvider} can be cached to enable
 * fast provision of {@link UniformRandomProvider#nextBoolean()},
 * {@link UniformRandomProvider#nextInt()}, and {@link UniformRandomProvider#nextInt(int)}.
 */
public final class CachedUniformRandomProviderFactory {

    /**
     * Class contains only static methods.
     */
    private CachedUniformRandomProviderFactory() {}

    /**
     * Marker interface to avoid double wrapping a Cached provider.
     */
    private interface CachedUniformRandomProvider {
        // Marker interface
    }

    /**
     * Wrap an IntProvider instance to enable fast provision of
     * {@link UniformRandomProvider#nextBoolean()}.
     */
    static class CachedIntProvider
        extends IntProvider
        implements CachedUniformRandomProvider {

        /** The underlying source of randomness. */
        protected final UniformRandomProvider rng;

        /**
         * The cached value from a call to random UniformRandomProvider#nextInt().
         *
         * <p>Provides a bit source for booleans.
         */
        private int booleanSource; // Initialised as 0

        /**
         * The bit mask of the boolean source to obtain the boolean bit.
         *
         * <p>The bit mask contains a single bit set.
         * This begins at the most significant bit and is gradually shifted
         * to zero.
         */
        private int booleanBitMask; // Initialised as 0

        /**
         * Create a new instance.
         *
         * @param rng the source of randomness
         */
        CachedIntProvider(IntProvider rng) {
            this.rng = rng;
        }

        @Override
        public int next() {
            // Delegate this
            return rng.nextInt();
        }

        @Override
        public boolean nextBoolean() {
            if (booleanBitMask == 0) {
                // Get the next value
                booleanSource = nextInt();
                booleanBitMask = 1;
            }
            final boolean next = (booleanSource & booleanBitMask) == 0;
            // Shift up. This will eventually overflow and become zero.
            booleanBitMask <<= 1;
            return next;
        }
    }

    /**
     * Wrap an IntProvider instance to enable fast provision of
     * {@link UniformRandomProvider#nextBoolean()}.
     */
    static class CachedLongProvider
        extends LongProvider
        implements CachedUniformRandomProvider {

        /** The underlying source of randomness. */
        protected final UniformRandomProvider rng;

        /**
         * The cached value from a call to random UniformRandomProvider#nextInt().
         *
         * <p>Provides a bit source for booleans.
         */
        private long booleanSource; // Initialised as 0

        /**
         * The bit mask of the boolean source to obtain the boolean bit.
         *
         * <p>The bit mask contains a single bit set.
         * This begins at the most significant bit and is gradually shifted
         * to zero.
         */
        private long booleanBitMask; // Initialised as 0

        /** The upper 32-bits from a call to UniformRandomProvider#nextLong(). */
        private int nextIntValue;

        /** Flag to indicate an int value has been cached. */
        private boolean cachedIntValue; // Initialised as false

        /**
         * Create a new instance.
         *
         * @param rng the source of randomness
         */
        CachedLongProvider(LongProvider rng) {
            this.rng = rng;
        }

        @Override
        public long next() {
            // Delegate this
            return rng.nextLong();
        }

        @Override
        public int nextInt() {
            if (cachedIntValue) {
                cachedIntValue = false;
                return nextIntValue;
            }
            final long sample = rng.nextLong();
            nextIntValue = NumberFactory.extractLo(sample);
            cachedIntValue = true;
            return NumberFactory.extractHi(sample);
        }

        @Override
        public boolean nextBoolean() {
            if (booleanBitMask == 0) {
                // Get the next value
                booleanSource = nextLong();
                booleanBitMask = 1;
            }
            final boolean next = (booleanSource & booleanBitMask) == 0;
            // Shift up. This will eventually overflow and become zero.
            booleanBitMask <<= 1;
            return next;
        }
    }

    /**
     * Wrap the source of randomness.
     *
     * <p>The returned provider will cache values from an {@link IntProvider} or
     * {@link LongProvider} to enable fast provision of
     * {@link UniformRandomProvider#nextBoolean()},
     * and in the case of a {@link LongProvider} also {@link UniformRandomProvider#nextInt()}.
     *
     * <p>If the source of randomness cannot be wrapped then it is returned unmodified.
     *
     * @param rng the source of randomness
     * @return the wrapped uniform random provider
     */
    public static UniformRandomProvider wrap(UniformRandomProvider rng) {
        // Avoid double wrapping
        if (rng instanceof CachedUniformRandomProvider) {
            return rng;
        }
        if (rng instanceof LongProvider) {
            return new CachedLongProvider((LongProvider)rng);
        }
        if (rng instanceof IntProvider) {
            return new CachedIntProvider((IntProvider)rng);
        }
        // Unknown implementation
        return rng;
    }
}
